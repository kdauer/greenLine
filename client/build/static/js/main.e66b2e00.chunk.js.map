{"version":3,"sources":["components/Signup.js","components/Login.js","components/Navbar.js","components/Autocomplete.js","components/TripDetail.js","components/ResultList.js","components/Results.js","components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["Signup","state","username","password","message","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","axios","post","then","response","props","history","push","setUser","data","catch","err","onSubmit","this","htmlFor","type","id","onChange","Component","Login","console","log","Navbar","user","to","onClick","delete","className","resetTripResults","Autocomplete","loading","showLoader","setTimeout","cities","results","forEach","c","includes","address","city","options","slice","map","r","key","e","updateText","innerText","el","TripDetail","trip","selectedTrip","onlyHour","timeString","convert","str1","str2","departure","Date","arrival","toLocaleTimeString","legs","leg","index","origin","departurePlatform","destination","arrivalPlatform","line","ResultList","detail","details","showDetail","handleClick","length","duration","firstClass","normalPrice","style","border","product","Results","resultData","journey","i","obj","price","amount","SearchForm","date","from","toId","fromId","class","travelers","resultTo","resultFrom","savedJourney","newFromId","newToId","getPrices","get","firstPrice","Promise","all","allRes","resultListSetTrue","getStations","directions","newDataTo","newDataFrom","handleInputChange","direction","text","updateTo","handleClickSave","isLoggedIn","resultListRender","App","newSearchForm","userObj","path","render","exact","Boolean","React","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.e66b2e00.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Signup extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    message: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    axios\n      .post(\"/api/auth/signup\", {\n        username: this.state.username,\n        password: this.state.password\n      })\n      .then(response => {\n        this.props.history.push(\"/\");\n        this.props.setUser(response.data);\n      })\n      .catch(err => {\n        this.setState({\n          message: err.response.data.message\n        });\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"username\">Username: </label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            name=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n\n          <label htmlFor=\"password\">Password: </label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n\n          <button type=\"submit\">Sign up</button>\n        </form>\n        {this.state.message && <p>{this.state.message}</p>}\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    message: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    axios\n      .post(\"/api/auth/login\", {\n        username: this.state.username,\n        password: this.state.password\n      })\n      .then(response => {\n        this.props.history.push(\"/\");\n        console.log(response);\n        this.props.setUser(response.data);\n      })\n      .catch(err => {\n        this.setState({\n          message: err.response.data.message\n        });\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"username\">Username: </label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            name=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n\n          <label htmlFor=\"password\">Password: </label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n\n          <button type=\"submit\">Sign in</button>\n        </form>\n        {this.state.message && <p>{this.state.message}</p>}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../App.css\";\n\nconst Navbar = props => {\n  const logout = () => {\n    axios.delete(\"/api/auth/logout\").then(() => {\n      props.setUser(null);\n    });\n  };\n\n  if (props.user) {\n    return (\n      <nav>\n        <p>\n          <Link to=\"/\">Home</Link>\n        </p>\n        <Link onClick={logout} to=\"/\">\n          Logout\n        </Link>\n      </nav>\n    );\n  }\n  return (\n    <nav className=\"navbar\">\n      <Link className=\"navbar-home\" to=\"/\" onClick={props.resetTripResults}>\n        Home\n      </Link>\n      <Link className=\"navbar-login\" to=\"/login\">\n        Login\n      </Link>\n      <Link className=\"navbar-login\" to=\"/signup\">\n        Signup\n      </Link>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nexport default class Autocomplete extends Component {\n  state = {\n    loading: true,\n    showLoader: true\n  };\n\n  componentDidMount() {\n    // this.props.results.forEach(c => {\n    //   if (!this.state.cities.includes(c.address.city)) {\n    //     this.setState({\n    //       cities: [...this.state.cities, c.address.city]\n    //     });\n    //   }\n    // });\n\n    setTimeout(() => {\n      if (this.state.loading) {\n        this.setState({ showLoader: false });\n        // console.log(this.state.showLoader);\n      }\n    }, 4000);\n  }\n  render() {\n    const cities = [];\n    this.props.results.forEach(c => {\n      if (!cities.includes(c.address.city)) {\n        cities.push(c.address.city);\n      }\n    });\n    let options = this.props.results.slice(0, 10).map(r => (\n      <li\n        key={r.id}\n        onClick={e => {\n          this.props.updateText(e.target.innerText, r.id);\n        }}\n      >\n        {r.name}\n      </li>\n    ));\n\n    return (\n      <>\n        <input\n          name={this.props.name}\n          id={this.props.id}\n          onChange={this.props.onChange}\n          value={this.props.value}\n        />\n\n        {!this.state.showLoader && (\n          <ul>\n            {cities.map(el => {\n              return (\n                <li\n                  onClick={e => {\n                    this.props.updateText(e.target.innerText, el.id);\n                  }}\n                  key={el.id}\n                >\n                  {el}\n                </li>\n              );\n            })}\n            {options}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class TripDetail extends Component {\n  state = {\n    trip: this.props.selectedTrip\n  };\n\n  onlyHour = timeString => timeString.slice(11, 16);\n\n  convert = (str1, str2) => {\n    let departure = new Date(str1);\n    let arrival = new Date(str2);\n    return new Date(+arrival - +departure).toLocaleTimeString().slice(0, 4);\n  };\n\n  render() {\n    //Date(this.state.detail.legs.departure)\n    //new Date(+arrival - +departure).toLocaleTimeString();\n    console.log(this.state.trip);\n    return (\n      <div>\n        {this.state.trip.legs.map((leg, index) => {\n          return (\n            <>\n              <p>\n                {this.onlyHour(leg.departure)} {leg.origin.name} Platfrom:\n                {leg.departurePlatform}\n                =>\n                {this.onlyHour(leg.arrival)} {leg.destination.name} Platfrom:\n                {leg.arrivalPlatform}\n                Duration: {this.convert(leg.departure, leg.arrival)} |train:\n                {leg.line.name}|\n                {this.state.trip.legs[index + 1] &&\n                  `Transfer Time:\n                  ${this.convert(\n                    leg.arrival,\n                    this.state.trip.legs[index + 1].departure\n                  )}`}\n              </p>\n            </>\n          );\n        })}\n      </div>\n    );\n  }\n  /* <div>\n{/* this.props.setTripResults.map(details => {\n  return <ResultList details={details} key={details.id} />;\n})}\n</div>\nShows journey legs ( time, station names between two single connections in a given journey).\nDuration, platform number, train number, transfer time, next connection for each leg */\n}\n","import React, { Component } from \"react\";\nimport TripDetail from \"./TripDetail\";\n\nexport class ResultList extends Component {\n  state = {\n    detail: this.props.details,\n    showDetail: false\n  };\n\n  handleClick = () => {\n    this.state.showDetail\n      ? this.setState({\n          showDetail: false\n        })\n      : this.setState({\n          showDetail: true\n        });\n  };\n\n  render() {\n    const departure = new Date(this.state.detail.legs[0].departure);\n    const arrival = new Date(\n      this.state.detail.legs[this.state.detail.legs.length - 1].arrival\n    );\n    const duration = new Date(arrival - departure).toLocaleTimeString();\n    return (\n      <>\n        <div key={this.state.detail.id} onClick={this.handleClick}>\n          <p>\n            From: {this.state.detail.origin.name} at:\n            {this.state.detail.legs[0].departure.slice(0, 21)}, Platform:\n            {this.state.detail.legs[0].departurePlatform}\n          </p>\n          <p>\n            To: {this.state.detail.destination.name} at:\n            {this.state.detail.legs[0].arrival.slice(0, 21)}\n            ,Platform:{this.state.detail.legs[0].arrivalPlatform}\n          </p>\n          <p>\n            Duration: {duration.slice(0, 2) + \"h\" + duration.slice(3, 5) + \"m\"}\n          </p>\n          <p>Changes: {this.state.detail.legs.length - 1}</p>\n          <p>\n            First Class:\n            {this.state.detail.firstClass\n              ? this.state.detail.firstClass\n              : \"not available\"}\n          </p>\n          <p>\n            Second Class:\n            {this.state.detail.normalPrice}\n          </p>\n          <ul>\n            {this.state.detail.legs.map(el => {\n              return (\n                <li\n                  key={this.state.detail.id}\n                  style={{ border: \"1px solid red\" }}\n                >\n                  {el.line.product}\n                  {el.line.name}\n                </li>\n              );\n            })}\n          </ul>\n\n          {this.state.showDetail ? (\n            <TripDetail selectedTrip={this.state.detail} />\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ResultList;\n","import React, { Component } from \"react\";\nimport ResultList from \"./ResultList\";\n\nexport default class Results extends Component {\n  state = {\n    results: this.props.resultData,\n    firstClass: this.props.firstClass\n  };\n  render() {\n    // console.log(\"here are the result before mapping\", this.state.results);\n    // console.log(\n    //   \"here are the result before mapping for the first class\",\n    //   this.state.firstClass\n    // );\n\n    const map = this.state.results.map((journey, i) => {\n      const obj = {};\n      obj.origin = journey.origin;\n      obj.destination = journey.destination;\n      obj.normalPrice = journey.price.amount;\n      obj.firstClass = this.state.firstClass[i]?.price.amount;\n      obj.legs = journey.legs;\n      obj.id = journey.id;\n      return obj;\n    });\n    // console.log(map);\n    return (\n      <div>\n        {map.map(el => (\n          <ResultList details={el} key={el.id} />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Autocomplete from \"./Autocomplete\";\n// import { debounce } from \"lodash\";\nimport Results from \"./Results\";\nimport { Link } from \"react-router-dom\";\n\nexport class SearchForm extends Component {\n  state = {\n    date: \"\",\n    from: \"\",\n    to: \"\",\n    toId: \"\",\n    fromId: \"\",\n    class: \"\",\n    travelers: \"\",\n    resultTo: [],\n    resultFrom: [],\n    id: \"\",\n    savedJourney: {},\n    resultData: [],\n    firstClass: []\n  };\n\n  handleChange = e => {\n    // console.log(e.target);\n    const date = e.target.value;\n    this.setState({\n      date: date\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    let newFromId = this.state.fromId;\n    if (!newFromId) newFromId = this.state.from;\n\n    let newToId = this.state.toId;\n    if (!newToId) newToId = this.state.to;\n\n    const getPrices = axios.get(\n      \"/api/price?date=\" +\n        this.state.date.slice(0, 16) +\n        \"&fromId=\" +\n        newFromId +\n        \"&toId=\" +\n        newToId\n    );\n    console.log(getPrices);\n\n    const firstPrice = axios.get(\"/api/firstPrice\");\n\n    Promise.all([getPrices, firstPrice]).then(([allRes, firstClass]) => {\n      this.setState({\n        resultData: allRes.data,\n        firstClass: firstClass.data\n      });\n      this.props.resultListSetTrue();\n    });\n  };\n\n  getStations = directions => {\n    // console.log(\"DIRECTIONS\", directions);\n\n    axios\n      .post(\"/cities\", { to: this.state.to, from: this.state.from })\n      .then(response => {\n        if (directions === \"to\") {\n          let newDataTo = response.data.resultTo;\n          if (this.state.to === \"\") newDataTo = [];\n          this.setState({\n            resultTo: newDataTo\n          });\n        } else {\n          let newDataFrom = response.data.resultFrom;\n          if (this.state.from === \"\") newDataFrom = [];\n          this.setState({\n            resultFrom: newDataFrom\n          });\n        }\n      });\n  };\n\n  handleInputChange = direction => {\n    let target = direction.target.name;\n    this.setState(\n      {\n        [direction.target.name]: direction.target.value\n      },\n      () => {\n        this.getStations(target);\n      }\n    );\n  };\n\n  updateText = (text, id) => {\n    this.setState({\n      from: text,\n      fromId: id,\n      resultFrom: []\n    });\n  };\n\n  updateTo = (text, id) => {\n    this.setState({\n      to: text,\n      toId: id,\n      resultTo: []\n    });\n  };\n\n  handleClickSave = event => {\n    axios\n      .post(\"/journeys\", {\n        to: this.state.to,\n        toId: this.state.toId,\n        from: this.state.from,\n        fromId: this.state.fromId,\n        date: this.state.date.slice(0, 16)\n      })\n      .then(response => {\n        console.log(response.data);\n        this.setState({ savedJourney: response.data });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"From\">From</label>\n          <Autocomplete\n            name=\"from\"\n            id=\"from\"\n            updateText={this.updateText}\n            results={this.state.resultFrom}\n            value={this.state.from}\n            onChange={this.handleInputChange}\n          />\n          {/* <button >switch</button> */}\n          <label htmlFor=\"To\">To</label>\n\n          <Autocomplete\n            name=\"to\"\n            id={this.state.toId}\n            updateText={this.updateTo}\n            results={this.state.resultTo}\n            value={this.state.to}\n            onChange={this.handleInputChange}\n          />\n\n          <label htmlFor=\"Date\">Date </label>\n          <input\n            type=\"datetime-local\"\n            id=\"date\"\n            name=\"date\"\n            value={this.state.date}\n            onChange={this.handleChange}\n          />\n\n          <select>\n            <option value=\"E\">Adults</option>\n            <option value=\"K\">Children</option>\n            <option value=\"B\">Baby</option>\n          </select>\n          <button type=\"submit\">Search</button>\n        </form>\n        {this.props.isLoggedIn ? (\n          <button onClick={this.handleClickSave}>\n            Save this Trip to your List\n          </button>\n        ) : (\n          <Link to=\"/Login\">Login to save</Link>\n        )}\n        ;\n        {this.props.resultListRender ? (\n          <Results\n            isLoggedIn={this.props.isLoggedIn}\n            resultData={this.state.resultData}\n            firstClass={this.state.firstClass}\n          />\n        ) : (\n          <div></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport Signup from \"./components/Signup\";\nimport Login from \"./components/Login\";\nimport Navbar from \"./components/Navbar\";\nimport { Route } from \"react-router-dom\";\nimport SearchForm from \"./components/SearchForm\";\n\nclass App extends React.Component {\n  state = {\n    user: this.props.user,\n    resultListRender: false,\n    newSearchForm: false\n  };\n\n  setUser = userObj => {\n    this.setState({\n      user: userObj\n    });\n  };\n\n  // setTripResults = arrayOfResults => {\n  //   this.setState({ resultList: arrayOfResults });\n  // };\n\n  resetTripResults = () => {\n    this.setState({\n      resultListRender: false,\n      newSearchForm: true\n    });\n  };\n\n  resultListSetTrue = () => {\n    this.setState({\n      resultListRender: true\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navbar\n            setUser={this.setUser}\n            user={this.state.user}\n            //setTripResults={this.setTripResults}\n            resetTripResults={this.resetTripResults}\n          />\n\n          <div>\n            <Route\n              path=\"/signup\"\n              render={props => (\n                <Signup history={props.history} setUser={this.setUser} />\n              )}\n            />\n          </div>\n\n          <Route\n            path=\"/login\"\n            render={props => (\n              <Login history={props.history} setUser={this.setUser} />\n            )}\n          />\n        </header>\n        <Route\n          exact\n          path=\"/\"\n          render={props => (\n            <SearchForm\n              // setTripResults={this.setTripResults}\n              // {...props}\n              isLoggedIn={Boolean(this.state.user)}\n              resultListSetTrue={this.resultListSetTrue}\n              resultListRender={this.state.resultListRender}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n//import axios from \"axios\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n// user={response.data}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}